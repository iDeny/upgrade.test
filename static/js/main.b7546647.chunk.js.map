{"version":3,"sources":["redux/reducers/todo.js","db.js","components/block/TaskList/TaskList.js","components/block/NewTask/NewTask.js","App.js","redux/actionCreators/todo.js","redux/types/todo.js","serviceWorker.js","index.js"],"names":["defaultState","placeholder","todos","taskInput","db","Dexie","version","stores","TaskList","props","onCheckboxChange","List","className","map","task","key","id","FormControlLabel","control","Checkbox","checked","completed","onChange","name","label","text","NewTask","onAdd","styles","newTask","FormControl","required","FormGroup","row","OutlinedInput","size","variant","value","Button","color","onClick","mapDispatch","toggleCompleteInDb","target","dispatch","a","targetId","get","item","itemCompleteStatus","update","then","updated","toArray","newTodos","type","payload","changeInput","addTaskToDb","todoToAdd","table","add","Object","assign","connect","state","length","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b7546647.chunk.js","sourcesContent":["import * as types from '../types/todo';\n\n// -------- Default state of the branch --------\n\nconst defaultState = {\n\tplaceholder: 'Add a task',\n  todos: [],\n  taskInput: ''\n};\n\n// -------- Reducer --------\n\nexport default function(state = defaultState, action) {\n\tswitch (action.type) {\n\n\t\tcase types.LOAD_TASKS: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: action.payload\n\t\t\t};\n\t\t}\n\n\t\tcase types.ADD_TASK: {\n\t\t\tconst { id, text } = action.payload;\n\t\t\t\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: [...state.todos, {\n\t\t\t\t\tid,\n\t\t\t\t\ttext,\n\t\t\t\t\tcompleted: false\n\t\t\t\t}],\n\t\t\t\ttaskInput: ''\n\t\t\t};\n\t\t}\n\n\t\tcase types.CHANGE_INPUT: {\n\t\t\tconst { \n\t\t\t\t\ttarget: { \n\t\t\t\t\t\tvalue \n\t\t\t\t\t}\n\t\t\t} = action.payload;\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttaskInput: value\n\t\t\t}\n\t\t}\n\n\t\tcase types.TOGGLE_COMPLETE: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: action.payload\n\t\t\t}\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn state;\n\t\t}\n\t}\n}","import Dexie from 'dexie';\n\nconst db = new Dexie(\"TodoDB\");\ndb.version(1).stores({\n\ttodos: '++'\n});\n\nexport default db;","import React from 'react';\nimport { FormControlLabel, Checkbox, List } from '@material-ui/core';\n// import { makeStyles } from '@material-ui/core/styles';\n\nfunction TaskList(props) {\n\tconst { onCheckboxChange, todos } = props;\n\n\t// cross out style for completed todos\n\t// const classes = makeStyles({\n\t// \tlabel: {\n\t// \t\ttextDecoration: 'line-through'\n\t// \t}\n\t// });\n\n\treturn (\n\t\t<List className=\"task-list\">\n\t\t\t{todos.map((task) => (\n\t\t\t\t<div className=\"task-list_item\" key={task.id}>\n\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\tchecked={task.completed}\n\t\t\t\t\t\t\t\tonChange={onCheckboxChange}\n\t\t\t\t\t\t\t\tname={`${task.id}`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlabel={task.text}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</List>\n\t);\n}\n\nexport default TaskList;\n","import React from 'react';\nimport styles from './NewTask.css';\nimport { OutlinedInput, FormControl, FormGroup, Button } from '@material-ui/core';\n\nfunction NewTask(props) {\n\tconst { taskInput, placeholder, onChange, onAdd } = props;\n\n\treturn (\n\t\t<div className={styles.newTask}>\n\t\t\t<FormControl required>\n\t\t\t\t<FormGroup row>\n\t\t\t\t\t<OutlinedInput\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tid=\"outlined-basic\"\n\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\tvalue={taskInput}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={onAdd}>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</FormGroup>\n\t\t\t</FormControl>\n\t\t</div>\n\t);\n}\n\nexport default NewTask;\n","import React from 'react';\nimport { TaskList, NewTask } from './components';\nimport { connect } from 'react-redux';\n\n// Action creators\n\nimport {\n  toggleCompleteInDb,\n  changeInput,\n\taddTaskToDb\n} from './redux/actionCreators/todo';\n\n// ------------\n\nconst mapState = state => ({\n    placeholder: state.placeholder, \n    taskInput: state.taskInput, \n    todos: state.todos \n});\n\nconst mapDispatch = {\n  toggleCompleteInDb,\n  changeInput,\n  addTaskToDb\n};\n\nfunction App(props) {\n\n  const { toggleCompleteInDb, changeInput, addTaskToDb, placeholder, taskInput, todos } = props;\n\n  return (\n    <div className=\"App\">\n        <div className=\"todo\">\n          <div className=\"todo_new-task\">\n            <NewTask taskInput={taskInput} placeholder={placeholder} onChange={changeInput} onAdd={() => addTaskToDb(todos.length, taskInput)} />\n          </div>\n          <div className=\"todo_task-list\">\n            <TaskList onCheckboxChange={toggleCompleteInDb} todos={todos} />\n          </div>\n        </div>\n    </div>\n  );\n}\n\nexport default connect(mapState, mapDispatch)(App);\n","import * as types from '../types/todo';\nimport db from '../../db';\n\n// -------- Classic action creators --------\n\n// Load tasks\n\nexport const loadTasks = payload => ({\n\ttype: types.LOAD_TASKS,\n\tpayload\n})\n\n// Add a task\n\nexport const addTask = payload => ({\n\ttype: types.ADD_TASK,\n\tpayload\n});\n\n// Change input value\n\nexport const changeInput = payload => ({\n\ttype: types.CHANGE_INPUT,\n\tpayload\n});\n\n// Toggle complete status\n\nexport const toggleComplete = payload => ({\n\ttype: types.TOGGLE_COMPLETE,\n\tpayload\n});\n\n// -------- Async action creators --------\n\n// Load tasks from the database\n\nexport const loadTasksFromDb = () => dispatch => {\n\tdb.table('todos')\n      .toArray()\n\t\t\t.then((todos) => \n\t\t\t\tdispatch(loadTasks(todos))\n\t\t\t);\n};\n\n// Add a task to the database\n\nexport const addTaskToDb = (id, text) => dispatch => {\n\tconst todoToAdd = { id, text, completed: false };\n\n\tdb.table('todos')\n\t\t\t.add(todoToAdd, id)\n\t\t\t.then((id) => \n\t\t\t\tdispatch(addTask(Object.assign({}, todoToAdd, { id })))\n\t\t\t);\n};\n\n// Toggle complete status in the database\n\nexport const toggleCompleteInDb = ({ target: { name }}) => async dispatch => {\n\tlet targetId = +name;\n\tlet itemCompleteStatus;\n\tawait db.todos.get(targetId, (item) => {\n\t\titemCompleteStatus = item.completed;\n\t});\n\n  db.todos\n    .update(targetId, { completed: !itemCompleteStatus })\n    .then((updated) => \n\t\t\tdb.todos.toArray()\n\t\t\t.then((newTodos) => \n\t\t\t\tdispatch(toggleComplete(newTodos)))\n\t\t);\n};","export const LOAD_TASKS = 'LOAD_TASKS';\nexport const ADD_TASK = 'ADD_TASK';\nexport const CHANGE_INPUT = 'CHANGE_INPUT';\nexport const TOGGLE_COMPLETE = 'TOGGLE_COMPLETE';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport todo from './redux/reducers/todo';\nimport { loadTasksFromDb } from './redux/actionCreators/todo';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(todo, applyMiddleware(thunk));\nstore.dispatch(loadTasksFromDb());\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}