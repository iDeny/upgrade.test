{"version":3,"sources":["redux/reducers/todo.js","db.js","components/block/TaskList/TaskList.js","components/block/NewTask/NewTask.js","App.js","redux/actionCreators/todo.js","redux/types/todo.js","index.js"],"names":["defaultState","placeholder","todos","taskInput","db","Dexie","version","stores","TaskList","props","onCheckboxChange","List","className","map","task","key","id","FormControlLabel","control","Checkbox","checked","completed","onChange","name","label","text","NewTask","onAdd","styles","newTask","FormControl","required","FormGroup","row","OutlinedInput","size","variant","value","Button","color","onClick","mapDispatch","toggleCompleteInDb","target","dispatch","a","targetId","get","item","itemCompleteStatus","update","then","updated","toArray","newTodos","type","payload","changeInput","addTaskToDb","todoToAdd","table","add","Object","assign","connect","state","length","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2691079a.chunk.js","sourcesContent":["import * as types from '../types/todo';\n\n// -------- Default state of the branch --------\n\nconst defaultState = {\n\tplaceholder: 'Add a task',\n  todos: [],\n  taskInput: ''\n};\n\n// -------- Reducer --------\n\nexport default function(state = defaultState, action) {\n\tswitch (action.type) {\n\n\t\tcase types.LOAD_TASKS: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: action.payload\n\t\t\t};\n\t\t}\n\n\t\tcase types.ADD_TASK: {\n\t\t\tconst { id, text } = action.payload;\n\t\t\t\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: [...state.todos, {\n\t\t\t\t\tid,\n\t\t\t\t\ttext,\n\t\t\t\t\tcompleted: false\n\t\t\t\t}],\n\t\t\t\ttaskInput: ''\n\t\t\t};\n\t\t}\n\n\t\tcase types.CHANGE_INPUT: {\n\t\t\tconst { \n\t\t\t\t\ttarget: { \n\t\t\t\t\t\tvalue \n\t\t\t\t\t}\n\t\t\t} = action.payload;\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttaskInput: value\n\t\t\t}\n\t\t}\n\n\t\tcase types.TOGGLE_COMPLETE: {\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\ttodos: action.payload\n\t\t\t}\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn state;\n\t\t}\n\t}\n}","import Dexie from 'dexie';\n\nconst db = new Dexie(\"TodoDB\");\ndb.version(1).stores({\n\ttodos: '++'\n});\n\nexport default db;","import React from 'react';\nimport { FormControlLabel, Checkbox, List } from '@material-ui/core';\n// import { makeStyles } from '@material-ui/core/styles';\n\nfunction TaskList(props) {\n\tconst { onCheckboxChange, todos } = props;\n\n\t// cross out style for completed todos\n\t// const classes = makeStyles({\n\t// \tlabel: {\n\t// \t\ttextDecoration: 'line-through'\n\t// \t}\n\t// });\n\n\treturn (\n\t\t<List className=\"task-list\">\n\t\t\t{todos.map((task) => (\n\t\t\t\t<div className=\"task-list_item\" key={task.id}>\n\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\tcontrol={\n\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\tchecked={task.completed}\n\t\t\t\t\t\t\t\tonChange={onCheckboxChange}\n\t\t\t\t\t\t\t\tname={`${task.id}`}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlabel={task.text}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</List>\n\t);\n}\n\nexport default TaskList;\n","import React from 'react';\nimport styles from './NewTask.css';\nimport { OutlinedInput, FormControl, FormGroup, Button } from '@material-ui/core';\n\nfunction NewTask(props) {\n\tconst { taskInput, placeholder, onChange, onAdd } = props;\n\n\treturn (\n\t\t<div className={styles.newTask}>\n\t\t\t<FormControl required>\n\t\t\t\t<FormGroup row>\n\t\t\t\t\t<OutlinedInput\n\t\t\t\t\t\trequired\n\t\t\t\t\t\tid=\"outlined-basic\"\n\t\t\t\t\t\tsize=\"small\"\n\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\tvalue={taskInput}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={onAdd}>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</FormGroup>\n\t\t\t</FormControl>\n\t\t</div>\n\t);\n}\n\nexport default NewTask;\n","import React from 'react';\nimport { TaskList, NewTask } from './components';\nimport { connect } from 'react-redux';\n\n// Action creators\n\nimport {\n  toggleCompleteInDb,\n  changeInput,\n\taddTaskToDb\n} from './redux/actionCreators/todo';\n\n// ------------\n\nconst mapState = state => ({\n    placeholder: state.placeholder, \n    taskInput: state.taskInput, \n    todos: state.todos \n});\n\nconst mapDispatch = {\n  toggleCompleteInDb,\n  changeInput,\n  addTaskToDb\n};\n\nfunction App(props) {\n\n  const { toggleCompleteInDb, changeInput, addTaskToDb, placeholder, taskInput, todos } = props;\n\n  return (\n    <div className=\"App\">\n        <div className=\"todo\">\n          <div className=\"todo_new-task\">\n            <NewTask taskInput={taskInput} placeholder={placeholder} onChange={changeInput} onAdd={() => addTaskToDb(todos.length, taskInput)} />\n          </div>\n          <div className=\"todo_task-list\">\n            <TaskList onCheckboxChange={toggleCompleteInDb} todos={todos} />\n          </div>\n        </div>\n    </div>\n  );\n}\n\nexport default connect(mapState, mapDispatch)(App);\n","import * as types from '../types/todo';\nimport db from '../../db';\n\n// -------- Classic action creators --------\n\n// Load tasks\n\nexport const loadTasks = (payload) => ({\n\ttype: types.LOAD_TASKS,\n\tpayload,\n});\n\n// Add a task\n\nexport const addTask = (payload) => ({\n\ttype: types.ADD_TASK,\n\tpayload,\n});\n\n// Change input value\n\nexport const changeInput = (payload) => ({\n\ttype: types.CHANGE_INPUT,\n\tpayload,\n});\n\n// Toggle complete status\n\nexport const toggleComplete = (payload) => ({\n\ttype: types.TOGGLE_COMPLETE,\n\tpayload,\n});\n\n// -------- Async action creators --------\n\n// Load tasks from the database\n\nexport const loadTasksFromDb = () => (dispatch) => {\n\tdb.table('todos')\n\t\t.toArray()\n\t\t.then((todos) => dispatch(loadTasks(todos)));\n};\n\n// Add a task to the database\n\nexport const addTaskToDb = (id, text) => (dispatch) => {\n\tconst todoToAdd = { id, text, completed: false };\n\n\tdb.table('todos')\n\t\t.add(todoToAdd, id)\n\t\t.then((id) => dispatch(addTask(Object.assign({}, todoToAdd, { id }))));\n};\n\n// Toggle complete status in the database\n\nexport const toggleCompleteInDb = ({ target: { name } }) => async (dispatch) => {\n\tlet targetId = +name;\n\tlet itemCompleteStatus;\n\tawait db.todos.get(targetId, (item) => {\n\t\titemCompleteStatus = item.completed;\n\t});\n\n\tdb.todos\n\t\t.update(targetId, { completed: !itemCompleteStatus })\n\t\t.then((updated) =>\n\t\t\tdb.todos.toArray().then((newTodos) => dispatch(toggleComplete(newTodos)))\n\t\t);\n};\n","export const LOAD_TASKS = 'LOAD_TASKS';\nexport const ADD_TASK = 'ADD_TASK';\nexport const CHANGE_INPUT = 'CHANGE_INPUT';\nexport const TOGGLE_COMPLETE = 'TOGGLE_COMPLETE';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport todo from './redux/reducers/todo';\nimport { loadTasksFromDb } from './redux/actionCreators/todo';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nconst store = createStore(todo, applyMiddleware(thunk));\nstore.dispatch(loadTasksFromDb());\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}